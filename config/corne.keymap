#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&led_strip {
    chain-length = <0>;

    // chain-length = <27>;
    // 21 backlight + 6 glowlight
};

#define TAPPING_TERM 200

/ {
    behaviors {
        /*
    * td_lock groups locking functions into one key:
    *  - tap once to lock the host
    *  - tap twice to put the host to sleep
    */

        td_lock: tap_dance_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LOCK";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LG(LC(Q))>, <&kp LG(LA(C_EJECT))>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Clear_BLE_Profile {
            bindings = <&bt BT_CLR>;
            key-positions = <0 38 5>;
        };

        Space {
            bindings = <&kp SPACE>;
            key-positions = <29 28>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <17 16>;
        };

        Capslock {
            bindings = <&kp CLCK>;
            key-positions = <5 6>;
        };
    };

    macros {
        git_status: git_status {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp S &kp T &kp A &kp T &kp U &kp S>;
            label = "GIT_STATUS";
        };

        git_commit_all: git_commit_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp C &kp O &kp M &kp M &kp I &kp T &kp SPACE &kp MINUS &kp A &kp MINUS &kp M &kp SPACE &kp DQT &kp DQT &kp LEFT_ARROW>;
            label = "GIT_COMMIT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
&trans  &kp Q  &kp W  &kp E         &kp R        &kp T        &kp Y        &kp U            &kp I         &kp O    &kp P      &trans
&trans  &kp A  &kp S  &kp D         &kp F        &kp G        &kp H        &kp J            &kp K         &kp L    &kp SEMI   &trans
&trans  &kp Z  &kp X  &kp C         &kp V        &kp B        &kp N        &kp M            &kp COMMA     &kp DOT  &kp SLASH  &trans
                      &lt 5 ESCAPE  &lt 4 SPACE  &lt 2 TAB    &lt 2 ENTER  &lt 1 BACKSPACE  &lt 5 DELETE
            >;
        };

        num {
            bindings = <
&trans  &kp LBKT   &kp N9  &kp N8   &kp N7  &kp RBKT     &trans    &trans    &trans  &trans     &trans  &trans
&trans  &kp SQT    &kp N6  &kp N5   &kp N4  &kp EQUAL    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &kp GRAVE  &kp N3  &kp N2   &kp N1  &kp BSLH     &trans    &trans    &trans  &trans     &trans  &trans
                           &kp DOT  &kp N0  &kp MINUS    &trans    &trans    &trans
            >;

            label = "NUM";
        };

        sym {
            bindings = <
&trans  &kp LBRC   &kp LPAR   &kp STAR   &kp AMPS  &kp RBRC     &trans    &trans    &trans  &trans     &trans  &trans
&trans  &kp DQT    &kp CARET  &kp PRCNT  &kp DLLR  &kp PLUS     &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &kp TILDE  &kp POUND  &kp AT     &kp EXCL  &kp PIPE     &trans    &trans    &trans  &trans     &trans  &trans
                              &kp LPAR   &kp RPAR  &kp UNDER    &trans    &trans    &trans
            >;

            label = "SYM";
        };

        func {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp F9  &kp F10  &kp F11  &kp F12  &kp F18  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F5  &kp F6   &kp F7   &kp F8   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F1  &kp F2   &kp F3   &kp F4   &trans   &trans
                        &trans  &trans  &trans    &trans  &trans   &trans
            >;

            label = "FUNC";
        };

        nav_layer {
            label = "NAV";
            bindings = <
&kp LG(LC(TAB))  &trans  &kp LG(LEFT_BRACKET)  &kp LS(TAB)        &kp TAB          &kp LG(RIGHT_BRACKET)    &kp LA(LEFT)       &kp LA(DOWN)  &kp LA(UP)  &kp LA(RIGHT)  &trans  &trans
&kp ESC          &trans  &trans                &kp K_SCROLL_DOWN  &kp K_SCROLL_UP  &trans                   &kp LEFT           &kp DOWN      &kp UP      &kp RIGHT      &trans  &trans
&trans           &trans  &kp HOME              &kp PG_DN          &kp PG_UP        &kp END                  &kp LG(LEFT)       &kp LG(DOWN)  &kp LG(UP)  &kp LG(RIGHT)  &trans  &trans
                                               &trans             &trans           &trans                   &kp LC(LG(SPACE))  &trans        &trans
            >;
        };

        extended_layer {
            label = "EXT";
            bindings = <
&trans    &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6                &kp F7                &kp F8  &kp F9  &kp F10  &kp F12
&kp K_PP  &kp K_PREV    &kp K_NEXT    &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP    &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans  &trans  &trans   &trans
&trans    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans                &trans                &trans  &trans  &trans   &trans
                                      &trans        &trans        &trans          &trans                &trans                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Activate_EXT {
            if-layers = <4 4>;
            then-layer = <5>;
        };
    };
};
